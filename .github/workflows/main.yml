# .github/workflows/main.yml

# Name of the workflow. This will be displayed in the "Actions" tab of your GitHub repository.
name: CI-CD Pipeline for Flask App

# Controls when the workflow will run.
on:
  # Triggers the workflow on push events but only for the "main" branch.
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# Defines the jobs that will be run as part of the workflow.
jobs:
  # The name of our job is "build-and-push-image".
  build-and-push-image:
    # The type of runner that the job will run on. We use the latest version of Ubuntu.
    runs-on: ubuntu-latest

    # Sets permissions for the GITHUB_TOKEN to allow pushing to the GitHub Container Registry.
    permissions:
      contents: read
      packages: write

    # A sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Check out your repository's code so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to the GitHub Container Registry (ghcr.io).
      # We use the automatically generated GITHUB_TOKEN for authentication.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # The GitHub username or organization name.
          password: ${{ secrets.GITHUB_TOKEN }} # The secret GITHUB_TOKEN.

      # Step 3: Extract metadata (like tags and labels) for the Docker image.
      # This step automatically creates useful tags, such as a tag for the commit SHA.
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # e.g., ghcr.io/your-username/your-repo

      # Step 4: Build the Docker image using the Dockerfile and push it to the registry.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Use the current directory as the build context.
          push: true # Actually push the image after building.
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated in the previous step.
          labels: ${{ steps.meta.outputs.labels }} # Add the generated labels.

